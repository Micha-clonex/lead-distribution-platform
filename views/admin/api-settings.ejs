<%- include('../partials/admin-header') %>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">API Settings</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#settingModal">
            <i class="fas fa-plus me-2"></i>Add API Setting
        </button>
    </div>
</div>

<!-- API Settings Cards -->
<div class="row mb-4">
    <div class="col-md-4">
        <div class="card bg-info text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title">Total Integrations</h6>
                        <h3 class="mb-0"><%= settings.length %></h3>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-cogs fa-2x opacity-50"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card bg-success text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title">Active Services</h6>
                        <h3 class="mb-0"><%= settings.filter(s => s.is_active).length %></h3>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-check-circle fa-2x opacity-50"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card bg-warning text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title">Email Services</h6>
                        <h3 class="mb-0"><%= settings.filter(s => s.service_type === 'email').length %></h3>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-envelope fa-2x opacity-50"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Services Table -->
<div class="card">
    <div class="card-header">
        <h5 class="mb-0">
            <i class="fas fa-server me-2"></i>External Service Configurations
        </h5>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Service</th>
                        <th>Type</th>
                        <th>Status</th>
                        <th>Last Updated</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% settings.forEach(setting => { %>
                        <tr>
                            <td>
                                <div class="d-flex align-items-center">
                                    <% if (setting.service_type === 'email') { %>
                                        <i class="fas fa-envelope text-primary me-2"></i>
                                    <% } else { %>
                                        <i class="fas fa-cog text-secondary me-2"></i>
                                    <% } %>
                                    <strong><%= setting.service_name %></strong>
                                </div>
                            </td>
                            <td>
                                <span class="badge bg-secondary"><%= setting.service_type %></span>
                            </td>
                            <td>
                                <% if (setting.is_active) { %>
                                    <span class="badge bg-success">Active</span>
                                <% } else { %>
                                    <span class="badge bg-secondary">Inactive</span>
                                <% } %>
                            </td>
                            <td>
                                <%= new Date(setting.updated_at).toLocaleDateString() %>
                            </td>
                            <td>
                                <button class="btn btn-outline-primary btn-sm" onclick="editSetting(<%= setting.id %>)" title="Edit">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <% if (setting.service_type === 'email') { %>
                                    <button class="btn btn-outline-info btn-sm" onclick="testSetting(<%= setting.id %>)" title="Test Connection">
                                        <i class="fas fa-paper-plane"></i>
                                    </button>
                                <% } %>
                                <button class="btn btn-outline-danger btn-sm" onclick="deleteSetting(<%= setting.id %>)" title="Delete">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    <% }) %>
                    <% if (settings.length === 0) { %>
                        <tr>
                            <td colspan="5" class="text-center py-4">
                                <i class="fas fa-server fa-3x text-muted mb-3"></i>
                                <p class="text-muted">No API settings configured. Add your first service!</p>
                            </td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Setting Modal -->
<div class="modal fade" id="settingModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form id="settingForm">
                <div class="modal-header">
                    <h5 class="modal-title" id="settingModalTitle">Add API Setting</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="settingId" name="id">
                    
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Service Name *</label>
                            <select class="form-select" id="serviceName" name="service_name" required onchange="updateServiceFields()">
                                <option value="">Select a service...</option>
                                <option value="postmark">Postmark Email</option>
                                <option value="mailgun">Mailgun Email</option>
                                <option value="sendgrid">SendGrid Email</option>
                                <option value="amazon_ses">Amazon SES</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Service Type</label>
                            <input type="text" class="form-control" id="serviceType" name="service_type" readonly>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Status</label>
                        <select class="form-select" id="isActive" name="is_active">
                            <option value="true">Active</option>
                            <option value="false">Inactive</option>
                        </select>
                    </div>
                    
                    <!-- Dynamic Fields Container -->
                    <div id="dynamicFields"></div>
                    
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>Security:</strong> Your API credentials are stored securely in the database and never logged or exposed.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i>Save Settings
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Test Connection Modal -->
<div class="modal fade" id="testModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Test API Connection</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="testSettingId">
                <div class="mb-3">
                    <label class="form-label">Test Email Address</label>
                    <input type="email" class="form-control" id="testEmailAddress" required placeholder="test@example.com">
                    <div class="form-text">Enter your email to receive a test message</div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="sendTestConnection()">
                    <i class="fas fa-paper-plane me-2"></i>Send Test
                </button>
            </div>
        </div>
    </div>
</div>

<script>
let editingSettingId = null;

// Service field templates
const serviceFields = {
    postmark: {
        type: 'email',
        fields: [
            { name: 'server_token', label: 'Server Token', type: 'password', placeholder: 'Your Postmark server token', required: true },
            { name: 'from_email', label: 'From Email', type: 'email', placeholder: 'noreply@yourcompany.com', required: true }
        ]
    },
    mailgun: {
        type: 'email',
        fields: [
            { name: 'api_key', label: 'API Key', type: 'password', placeholder: 'Your Mailgun API key', required: true },
            { name: 'domain', label: 'Domain', type: 'text', placeholder: 'mg.yourcompany.com', required: true },
            { name: 'from_email', label: 'From Email', type: 'email', placeholder: 'noreply@yourcompany.com', required: true }
        ]
    },
    sendgrid: {
        type: 'email',
        fields: [
            { name: 'api_key', label: 'API Key', type: 'password', placeholder: 'Your SendGrid API key', required: true },
            { name: 'from_email', label: 'From Email', type: 'email', placeholder: 'noreply@yourcompany.com', required: true }
        ]
    },
    amazon_ses: {
        type: 'email',
        fields: [
            { name: 'access_key_id', label: 'Access Key ID', type: 'password', placeholder: 'Your AWS Access Key ID', required: true },
            { name: 'secret_access_key', label: 'Secret Access Key', type: 'password', placeholder: 'Your AWS Secret Access Key', required: true },
            { name: 'region', label: 'Region', type: 'text', placeholder: 'us-east-1', required: true },
            { name: 'from_email', label: 'From Email', type: 'email', placeholder: 'noreply@yourcompany.com', required: true }
        ]
    }
};

// Update service fields based on selection
function updateServiceFields() {
    const serviceName = document.getElementById('serviceName').value;
    const serviceTypeField = document.getElementById('serviceType');
    const dynamicFields = document.getElementById('dynamicFields');
    
    if (!serviceName || !serviceFields[serviceName]) {
        serviceTypeField.value = '';
        dynamicFields.innerHTML = '';
        return;
    }
    
    const service = serviceFields[serviceName];
    serviceTypeField.value = service.type;
    
    let fieldsHtml = '<h6 class="mb-3">API Credentials</h6>';
    service.fields.forEach(field => {
        fieldsHtml += `
            <div class="mb-3">
                <label class="form-label">${field.label}${field.required ? ' *' : ''}</label>
                <input type="${field.type}" class="form-control" name="settings[${field.name}]" 
                       placeholder="${field.placeholder}" ${field.required ? 'required' : ''}>
            </div>
        `;
    });
    
    dynamicFields.innerHTML = fieldsHtml;
}

// Save setting form
document.getElementById('settingForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    
    // Build settings object from dynamic fields
    const settings = {};
    for (let [key, value] of formData.entries()) {
        if (key.startsWith('settings[')) {
            const fieldName = key.replace('settings[', '').replace(']', '');
            settings[fieldName] = value;
        }
    }
    
    const data = {
        service_name: formData.get('service_name'),
        service_type: formData.get('service_type'),
        is_active: formData.get('is_active') === 'true',
        settings: settings
    };
    
    fetch('/api-settings/api', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            bootstrap.Modal.getInstance(document.getElementById('settingModal')).hide();
            location.reload();
        } else {
            alert('Error: ' + (data.error || 'Failed to save API setting'));
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Failed to save API setting');
    });
});

// Edit setting
function editSetting(id) {
    editingSettingId = id;
    document.getElementById('settingModalTitle').textContent = 'Edit API Setting';
    
    fetch(`/api-settings/api/${id}`)
        .then(response => response.json())
        .then(setting => {
            document.getElementById('settingId').value = setting.id;
            document.getElementById('serviceName').value = setting.service_name;
            document.getElementById('serviceType').value = setting.service_type;
            document.getElementById('isActive').value = setting.is_active;
            
            updateServiceFields();
            
            // Populate dynamic fields
            setTimeout(() => {
                Object.keys(setting.settings).forEach(key => {
                    const field = document.querySelector(`[name="settings[${key}]"]`);
                    if (field) {
                        field.value = setting.settings[key];
                    }
                });
            }, 100);
            
            new bootstrap.Modal(document.getElementById('settingModal')).show();
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to load API setting');
        });
}

// Test setting
function testSetting(id) {
    document.getElementById('testSettingId').value = id;
    new bootstrap.Modal(document.getElementById('testModal')).show();
}

// Send test connection
function sendTestConnection() {
    const settingId = document.getElementById('testSettingId').value;
    const testEmail = document.getElementById('testEmailAddress').value;
    
    if (!testEmail) {
        alert('Please enter a test email address');
        return;
    }
    
    fetch(`/api-settings/api/${settingId}/test`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ test_email: testEmail })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            bootstrap.Modal.getInstance(document.getElementById('testModal')).hide();
            alert('Test email sent successfully! Check your inbox.');
        } else {
            alert('Error: ' + (data.error || 'Failed to send test email'));
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Failed to test API connection');
    });
}

// Delete setting
function deleteSetting(id) {
    if (confirm('Are you sure you want to delete this API setting?')) {
        fetch(`/api-settings/api/${id}`, {
            method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload();
            } else {
                alert('Error: ' + (data.error || 'Failed to delete API setting'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to delete API setting');
        });
    }
}

// Reset form when modal is hidden
document.getElementById('settingModal').addEventListener('hidden.bs.modal', function () {
    editingSettingId = null;
    document.getElementById('settingForm').reset();
    document.getElementById('settingModalTitle').textContent = 'Add API Setting';
    document.getElementById('dynamicFields').innerHTML = '';
});
</script>

<%- include('../partials/admin-footer') %>