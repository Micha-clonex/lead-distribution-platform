<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">Partner Management</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addPartnerModal">
            <i class="fas fa-user-plus me-2"></i>Add Partner
        </button>
    </div>
</div>

<!-- Filters -->
<div class="card mb-4">
    <div class="card-body">
        <form method="GET" class="row g-3">
            <div class="col-md-3">
                <label class="form-label">Country</label>
                <select name="country" class="form-select">
                    <option value="">All Countries</option>
                    <% countries.forEach(country => { %>
                        <option value="<%= country %>" <%= (currentFilters.country === country) ? 'selected' : '' %>><%= country.charAt(0).toUpperCase() + country.slice(1) %></option>
                    <% }) %>
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label">Niche</label>
                <select name="niche" class="form-select">
                    <option value="">All Niches</option>
                    <% niches.forEach(niche => { %>
                        <option value="<%= niche %>" <%= (currentFilters.niche === niche) ? 'selected' : '' %>><%= niche.charAt(0).toUpperCase() + niche.slice(1) %></option>
                    <% }) %>
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label">Status</label>
                <select name="status" class="form-select">
                    <option value="">All Status</option>
                    <option value="active" <%= (currentFilters.status === 'active') ? 'selected' : '' %>>Active</option>
                    <option value="inactive" <%= (currentFilters.status === 'inactive') ? 'selected' : '' %>>Inactive</option>
                    <option value="paused" <%= (currentFilters.status === 'paused') ? 'selected' : '' %>>Paused</option>
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label">&nbsp;</label>
                <div>
                    <button type="submit" class="btn btn-outline-primary">
                        <i class="fas fa-filter me-1"></i>Filter
                    </button>
                    <a href="/partners" class="btn btn-outline-secondary">
                        <i class="fas fa-times me-1"></i>Clear
                    </a>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Partners Table -->
<div class="card">
    <div class="card-header">
        <h5 class="mb-0">
            <i class="fas fa-users me-2"></i>Partners (<%= partners.length %>)
        </h5>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped data-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Country</th>
                        <th>Niche</th>
                        <th>Daily Limit</th>
                        <th>Premium/Raw Split</th>
                        <th>Today's Performance</th>
                        <th>Status</th>
                        <th>Created</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% partners.forEach(partner => { %>
                        <tr>
                            <td><%= partner.id %></td>
                            <td><%= partner.name %></td>
                            <td><%= partner.email %></td>
                            <td>
                                <span class="badge bg-info">
                                    <%= partner.country.charAt(0).toUpperCase() + partner.country.slice(1) %>
                                </span>
                            </td>
                            <td>
                                <span class="badge bg-<%= partner.niche === 'forex' ? 'success' : 'warning' %>">
                                    <%= partner.niche.charAt(0).toUpperCase() + partner.niche.slice(1) %>
                                </span>
                            </td>
                            <td><%= partner.daily_limit %></td>
                            <td>
                                <% 
                                    const premiumPct = Math.max(0, Math.min(100, Math.round(partner.premium_ratio * 100)));
                                    const rawPct = 100 - premiumPct;
                                %>
                                <div class="ratio-display">
                                    <div class="d-flex align-items-center mb-1">
                                        <small class="text-muted me-2">Premium:</small>
                                        <span class="badge bg-primary me-2"><%= premiumPct %>%</span>
                                        <small class="text-muted me-2">Raw:</small>
                                        <span class="badge bg-secondary"><%= rawPct %>%</span>
                                    </div>
                                    <div class="progress" style="height: 6px;">
                                        <div class="progress-bar bg-primary" role="progressbar" 
                                             style="width: <%= premiumPct %>%"
                                             title="<%= premiumPct %>% Premium leads">
                                        </div>
                                        <div class="progress-bar bg-secondary" role="progressbar"
                                             style="width: <%= rawPct %>%"
                                             title="<%= rawPct %>% Raw leads">
                                        </div>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <% 
                                    const targetPct = Math.round(partner.premium_ratio * 100);
                                    const actualPct = Math.round(partner.actual_ratio * 100);
                                    const variance = actualPct - targetPct;
                                    const performanceClass = Math.abs(variance) <= 5 ? 'success' : 
                                                           Math.abs(variance) <= 15 ? 'warning' : 'danger';
                                %>
                                <div class="analytics-display">
                                    <div class="d-flex align-items-center justify-content-between mb-1">
                                        <div>
                                            <small class="text-muted">Target:</small>
                                            <span class="badge bg-primary"><%= targetPct %>%</span>
                                        </div>
                                        <div>
                                            <small class="text-muted">Actual:</small>
                                            <span class="badge bg-<%= performanceClass %>"><%= actualPct %>%</span>
                                        </div>
                                    </div>
                                    <div class="d-flex align-items-center">
                                        <small class="text-muted me-2">Leads: <%= partner.todays_leads || 0 %></small>
                                        <% if (variance !== 0) { %>
                                            <small class="badge bg-<%= variance > 0 ? 'info' : 'warning' %>" style="font-size: 0.6rem;">
                                                <%= variance > 0 ? '+' : '' %><%= variance %>%
                                            </small>
                                        <% } %>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <span class="badge bg-<%= partner.status === 'active' ? 'success' : (partner.status === 'paused' ? 'warning' : 'danger') %>">
                                    <%= partner.status.charAt(0).toUpperCase() + partner.status.slice(1) %>
                                </span>
                            </td>
                            <td><%= new Date(partner.created_at).toLocaleDateString() %></td>
                            <td>
                                <div class="btn-group btn-group-sm">
                                    <button class="btn btn-outline-primary" data-action="edit-partner" data-id="<%= partner.id %>" title="Edit">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-outline-success" data-action="manage-crm" data-id="<%= partner.id %>" data-id-type="partner" title="CRM Integration">
                                        <i class="fas fa-cog"></i>
                                    </button>
                                    <button class="btn btn-outline-info" data-action="view-status" data-id="<%= partner.id %>" title="Status Tracking">
                                        <i class="fas fa-chart-line"></i>
                                    </button>
                                    <button class="btn btn-outline-danger" data-action="delete-partner" data-id="<%= partner.id %>" title="Delete">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Add Partner Modal -->
<div class="modal fade" id="addPartnerModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form action="/partners" method="POST">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Partner</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Partner Name *</label>
                            <input type="text" class="form-control" name="name" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Email *</label>
                            <input type="email" class="form-control" name="email" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Country *</label>
                            <select class="form-select" name="country" required>
                                <option value="">Select Country</option>
                                <% countries.forEach(country => { %>
                                    <option value="<%= country %>"><%= country.charAt(0).toUpperCase() + country.slice(1) %></option>
                                <% }) %>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Niche *</label>
                            <select class="form-select" name="niche" required>
                                <option value="">Select Niche</option>
                                <% niches.forEach(niche => { %>
                                    <option value="<%= niche %>"><%= niche.charAt(0).toUpperCase() + niche.slice(1) %></option>
                                <% }) %>
                            </select>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Daily Limit</label>
                            <input type="number" class="form-control" name="daily_limit" value="50" min="1">
                        </div>
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Premium Ratio (%)</label>
                            <input type="number" class="form-control" name="premium_ratio" value="70" min="0" max="100" step="0.01">
                        </div>
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Timezone</label>
                            <select class="form-select" name="timezone">
                                <option value="UTC">UTC</option>
                                <option value="Europe/Berlin">Europe/Berlin</option>
                                <option value="Europe/Vienna">Europe/Vienna</option>
                                <option value="Europe/Madrid">Europe/Madrid</option>
                                <option value="America/Toronto">America/Toronto</option>
                                <option value="Europe/Rome">Europe/Rome</option>
                                <option value="Europe/London">Europe/London</option>
                                <option value="Europe/Oslo">Europe/Oslo</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- Partner Integration Settings -->
                    <div class="card mt-3 mb-3">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="fas fa-plug me-2"></i>Lead Integration</h6>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label">Partner Webhook URL *</label>
                                <input type="url" class="form-control" name="webhook_url" placeholder="https://partner-crm.com/webhook/leads" required>
                                <div class="form-text">
                                    <i class="fas fa-info-circle me-1"></i>
                                    HTTPS URL where leads will be sent to this partner. Must be secure (HTTPS only).
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Phone Number Format</label>
                                    <select class="form-select" name="phone_format">
                                        <option value="international">International (+1234567890)</option>
                                        <option value="national">National (1234567890)</option>
                                        <option value="local">Local (123-456-7890)</option>
                                    </select>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Required Fields</label>
                                    <input type="text" class="form-control" name="required_fields" placeholder="name,email,phone,country">
                                    <div class="form-text">Comma-separated list of required fields</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Partner</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Partner Modal -->
<div class="modal fade" id="editPartnerModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form id="editPartnerForm">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Partner</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="editPartnerId" name="id">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Partner Name *</label>
                            <input type="text" class="form-control" id="editPartnerName" name="name" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Email *</label>
                            <input type="email" class="form-control" id="editPartnerEmail" name="email" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Country *</label>
                            <select class="form-select" id="editPartnerCountry" name="country" required>
                                <option value="">Select Country</option>
                                <% countries.forEach(country => { %>
                                    <option value="<%= country %>"><%= country.charAt(0).toUpperCase() + country.slice(1) %></option>
                                <% }) %>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Niche *</label>
                            <select class="form-select" id="editPartnerNiche" name="niche" required>
                                <option value="">Select Niche</option>
                                <% niches.forEach(niche => { %>
                                    <option value="<%= niche %>"><%= niche.charAt(0).toUpperCase() + niche.slice(1) %></option>
                                <% }) %>
                            </select>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Daily Limit</label>
                            <input type="number" class="form-control" id="editPartnerDailyLimit" name="daily_limit" min="1">
                        </div>
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Premium Ratio (%)</label>
                            <input type="number" class="form-control" id="editPartnerPremiumRatio" name="premium_ratio" min="0" max="100" step="0.01" required>
                            <div class="form-text">Percentage of premium leads this partner will receive</div>
                        </div>
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" id="editPartnerStatus" name="status">
                                <option value="active">Active</option>
                                <option value="paused">Paused</option>
                                <option value="inactive">Inactive</option>
                            </select>
                        </div>
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Timezone</label>
                            <select class="form-select" id="editPartnerTimezone" name="timezone">
                                <option value="UTC">UTC</option>
                                <option value="Europe/Berlin">Europe/Berlin</option>
                                <option value="Europe/Vienna">Europe/Vienna</option>
                                <option value="Europe/Madrid">Europe/Madrid</option>
                                <option value="America/Toronto">America/Toronto</option>
                                <option value="Europe/Rome">Europe/Rome</option>
                                <option value="Europe/London">Europe/London</option>
                                <option value="Europe/Oslo">Europe/Oslo</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- Partner Integration Settings -->
                    <div class="card mt-3 mb-3">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="fas fa-plug me-2"></i>Lead Integration</h6>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label">Partner Webhook URL *</label>
                                <input type="url" class="form-control" id="editPartnerWebhookUrl" name="webhook_url" placeholder="https://partner-crm.com/webhook/leads" required>
                                <div class="form-text">
                                    <i class="fas fa-info-circle me-1"></i>
                                    HTTPS URL where leads will be sent to this partner. Must be secure (HTTPS only).
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Phone Number Format</label>
                                    <select class="form-select" id="editPartnerPhoneFormat" name="phone_format">
                                        <option value="international">International (+1234567890)</option>
                                        <option value="national">National (1234567890)</option>
                                        <option value="local">Local (123-456-7890)</option>
                                    </select>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Required Fields</label>
                                    <input type="text" class="form-control" id="editPartnerRequiredFields" name="required_fields" placeholder="name,email,phone,country">
                                    <div class="form-text">Comma-separated list of required fields</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Recovery Fields Configuration -->
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Recovery Fields Format</label>
                            <select class="form-select" id="editPartnerRecoveryFormat" name="recovery_fields_format">
                                <option value="separate">Separate Fields (amount_lost, fraud_type)</option>
                                <option value="notes">Combined in Notes Field</option>
                            </select>
                            <div class="form-text">
                                <small class="text-muted">
                                    How recovery lead data (amount lost, fraud type) should be sent to this partner's CRM.
                                    <br><strong>Separate Fields:</strong> Sends as individual fields
                                    <br><strong>Notes:</strong> Combines into a single notes field
                                </small>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3" id="recoveryFormatPreview">
                            <!-- Preview will be shown here via JavaScript -->
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Update Partner</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- CRM Integration Modal -->
<div class="modal fade" id="crmIntegrationModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">CRM Integration Settings</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="crmIntegrationForm">
                    <input type="hidden" id="crmPartnerId" name="partner_id">
                    
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Partner Name</label>
                            <input type="text" class="form-control" id="crmPartnerName" readonly>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label class="form-label">CRM System Name *</label>
                            <input type="text" class="form-control" id="crmName" name="crm_name" placeholder="e.g., Manticore CRM" required>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label class="form-label">CRM Type</label>
                            <select class="form-select" id="crmType" name="crm_type" onchange="updateCrmTemplateFields()">
                                <option value="generic">Generic (Default)</option>
                                <option value="manticore">Manticore CRM</option>
                                <option value="salesforce">Salesforce</option>
                                <option value="hubspot">HubSpot</option>
                                <option value="custom">Custom (Use Field Mapping)</option>
                            </select>
                            <div class="form-text">Select CRM type for optimized test payloads</div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">API Endpoint *</label>
                        <input type="url" class="form-control" id="crmEndpoint" name="api_endpoint" 
                               placeholder="https://api.manticore-crm.site/contacts" required>
                        <div class="form-text">The URL where leads will be sent</div>
                    </div>
                    
                    <!-- Universal Authentication System -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="fas fa-shield-alt me-2"></i>Authentication Settings</h6>
                        </div>
                        <div class="card-body">
                            <div class="row mb-3">
                                <div class="col-md-4">
                                    <label class="form-label">Authentication Type *</label>
                                    <select class="form-select" id="crmAuthType" name="auth_type" onchange="updateUniversalAuthFields()" required>
                                        <option value="">Select Authentication</option>
                                        <option value="bearer_token">Bearer Token</option>
                                        <option value="api_key">API Key (Header)</option>
                                        <option value="basic_auth">Basic Authentication</option>
                                        <option value="custom_header">Custom Header</option>
                                        <option value="query_param">Query Parameter</option>
                                        <option value="oauth2">OAuth2 Token</option>
                                        <option value="custom">Custom Auth</option>
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">Request Method</label>
                                    <select class="form-select" id="crmMethod" name="request_method">
                                        <option value="POST">POST</option>
                                        <option value="PUT">PUT</option>
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-check form-switch mt-4">
                                        <input class="form-check-input" type="checkbox" id="crmIsActive" name="is_active" checked>
                                        <label class="form-check-label" for="crmIsActive">
                                            Enable Integration
                                        </label>
                                    </div>
                                </div>
                            </div>

                            <!-- Dynamic Auth Configuration Fields -->
                            <div id="authConfigFields"></div>
                            
                            <div class="mt-3">
                                <small class="text-muted" id="authHint">Configure authentication based on your partner's CRM requirements</small>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Preview/Test URL (Optional)</label>
                        <input type="url" class="form-control" id="crmTestUrl" name="test_url" 
                               placeholder="https://api.manticore-crm.site/contacts/your-api-key">
                        <div class="form-text">URL to preview leads in partner's CRM</div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Additional Headers (JSON)</label>
                        <textarea class="form-control" id="crmHeaders" name="request_headers" rows="3" 
                                  placeholder='{"Content-Type": "application/json", "User-Agent": "LeadPlatform"}'>{}</textarea>
                        <div class="form-text">Additional HTTP headers to send with requests</div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Field Mapping (JSON)</label>
                        <textarea class="form-control" id="crmFieldMapping" name="field_mapping" rows="5" 
                                  placeholder='{"first_name": "firstName", "last_name": "lastName", "email": "email", "phone": "phone", "country": "country"}'>{}</textarea>
                        <div class="form-text">How to map lead fields to partner's CRM fields</div>
                    </div>
                    
                    <!-- Status Pulling Configuration -->
                    <hr>
                    <h6><i class="fas fa-sync me-2"></i>Status Pulling (Optional)</h6>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Status Endpoint URL</label>
                            <input type="url" class="form-control" id="statusPullEndpoint" 
                                   placeholder="https://api.partner.com/leads/status">
                            <div class="form-text">URL to fetch lead status updates from partner</div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Pull Method</label>
                            <select class="form-control" id="statusPullMethod">
                                <option value="GET">GET</option>
                                <option value="POST">POST</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Pull Frequency (min)</label>
                            <input type="number" class="form-control" id="pullFrequency" 
                                   value="60" min="5" max="1440" placeholder="60">
                            <div class="form-text">How often to check for updates</div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Status Field Mapping (JSON)</label>
                        <textarea class="form-control" id="statusFieldMapping" rows="3" 
                                  placeholder='{"active": "qualified", "converted": "converted", "rejected": "rejected"}'>{}</textarea>
                        <div class="form-text">How to map partner's status values to our system</div>
                    </div>

                    <div class="mb-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="statusPullingActive">
                            <label class="form-check-label" for="statusPullingActive">
                                Enable Status Pulling (automatically fetch lead status from partner)
                            </label>
                        </div>
                    </div>
                    
                </form>
                
                <!-- Test Section -->
                <div class="border-top pt-3">
                    <h6>Test Integration</h6>
                    <div class="row">
                        <div class="col-md-8">
                            <button type="button" class="btn btn-outline-info" onclick="testCRMIntegration()">
                                <i class="fas fa-flask me-1"></i>Test Connection
                            </button>
                            <button type="button" class="btn btn-outline-secondary" onclick="previewCRM()">
                                <i class="fas fa-eye me-1"></i>Preview Leads
                            </button>
                        </div>
                        <div class="col-md-4">
                            <div id="testResult" class="alert" style="display: none;" role="alert"></div>
                        </div>
                    </div>
                </div>
                
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveCRMIntegration()">Save Integration</button>
            </div>
        </div>
    </div>
</div>

<!-- Status Tracking Modal -->
<div class="modal fade" id="statusTrackingModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Lead Status Tracking</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="statusTrackingContent">
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
function editPartner(id) {
    // Find partner data
    const partners = <%- JSON.stringify(partners) %>;
    const partner = partners.find(p => p.id == id);
    
    if (!partner) {
        alert('Partner not found');
        return;
    }
    
    // Fill edit form with current data
    document.getElementById('editPartnerId').value = partner.id;
    document.getElementById('editPartnerName').value = partner.name;
    document.getElementById('editPartnerEmail').value = partner.email;
    document.getElementById('editPartnerCountry').value = partner.country;
    document.getElementById('editPartnerNiche').value = partner.niche;
    document.getElementById('editPartnerDailyLimit').value = partner.daily_limit;
    document.getElementById('editPartnerPremiumRatio').value = (partner.premium_ratio * 100).toFixed(2);
    document.getElementById('editPartnerStatus').value = partner.status;
    document.getElementById('editPartnerTimezone').value = partner.timezone;
    document.getElementById('editPartnerRecoveryFormat').value = partner.recovery_fields_format || 'separate';
    
    // Show/hide recovery format based on niche and update preview
    toggleRecoveryFormatVisibility(partner.niche);
    
    // Setup event listeners for this modal session
    setupEditModalEventListeners();
    
    // Show modal
    new bootstrap.Modal(document.getElementById('editPartnerModal')).show();
}

function deletePartner(id) {
    if (confirm('Are you sure you want to delete this partner?')) {
        fetch(`/partners/${id}`, {
            method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload();
            } else {
                alert('Failed to delete partner');
            }
        });
    }
}

// Handle edit form submission
document.getElementById('editPartnerForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const id = formData.get('id');
    
    // Normalize premium_ratio to ensure it's clamped between 0-100
    const premiumRatio = Math.max(0, Math.min(100, parseFloat(formData.get('premium_ratio')) || 0));
    
    const data = {
        name: formData.get('name'),
        email: formData.get('email'),
        country: formData.get('country'),
        niche: formData.get('niche'),
        daily_limit: formData.get('daily_limit'),
        premium_ratio: premiumRatio,
        status: formData.get('status'),
        timezone: formData.get('timezone'),
        recovery_fields_format: formData.get('recovery_fields_format') || 'separate'
    };
    
    fetch(`/partners/${id}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            bootstrap.Modal.getInstance(document.getElementById('editPartnerModal')).hide();
            location.reload();
        } else {
            alert('Failed to update partner: ' + (data.error || 'Unknown error'));
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Failed to update partner');
    });
});

// **NEW: Recovery fields format helper functions**
function toggleRecoveryFormatVisibility(niche) {
    const recoveryRow = document.getElementById('editPartnerRecoveryFormat')?.closest('.row');
    if (recoveryRow) {
        recoveryRow.style.display = (niche === 'recovery') ? 'block' : 'none';
        
        // Also update the preview when visibility changes
        if (niche === 'recovery') {
            const currentFormat = document.getElementById('editPartnerRecoveryFormat')?.value || 'separate';
            updateRecoveryFormatPreview(currentFormat);
        }
    }
}

function updateRecoveryFormatPreview(format) {
    const previewDiv = document.getElementById('recoveryFormatPreview');
    if (!previewDiv) return;
    
    if (format === 'notes') {
        previewDiv.innerHTML = `
            <div class="card">
                <div class="card-header py-2">
                    <small class="fw-bold text-muted">PAYLOAD PREVIEW</small>
                </div>
                <div class="card-body py-2">
                    <code class="small">
                        {<br>
                        &nbsp;&nbsp;"first_name": "John",<br>
                        &nbsp;&nbsp;"last_name": "Smith",<br>
                        &nbsp;&nbsp;"email": "john@example.com",<br>
                        &nbsp;&nbsp;"phone": "+1234567890",<br>
                        &nbsp;&nbsp;<span class="text-primary">"notes": "Amount Lost: $5000 | Fraud Type: Binary Options"</span><br>
                        }
                    </code>
                </div>
            </div>
        `;
    } else {
        previewDiv.innerHTML = `
            <div class="card">
                <div class="card-header py-2">
                    <small class="fw-bold text-muted">PAYLOAD PREVIEW</small>
                </div>
                <div class="card-body py-2">
                    <code class="small">
                        {<br>
                        &nbsp;&nbsp;"first_name": "John",<br>
                        &nbsp;&nbsp;"last_name": "Smith",<br>
                        &nbsp;&nbsp;"email": "john@example.com",<br>
                        &nbsp;&nbsp;"phone": "+1234567890",<br>
                        &nbsp;&nbsp;<span class="text-primary">"amount_lost": "$5000",</span><br>
                        &nbsp;&nbsp;<span class="text-primary">"fraud_type": "Binary Options"</span><br>
                        }
                    </code>
                </div>
            </div>
        `;
    }
}

// **FIXED: Better event listener setup for edit modal**
function setupEditModalEventListeners() {
    // Remove any existing listeners to avoid duplicates
    const recoveryFormatSelect = document.getElementById('editPartnerRecoveryFormat');
    const nicheSelect = document.getElementById('editPartnerNiche');
    
    if (recoveryFormatSelect) {
        // Clone node to remove all event listeners, then replace
        const newRecoverySelect = recoveryFormatSelect.cloneNode(true);
        recoveryFormatSelect.parentNode.replaceChild(newRecoverySelect, recoveryFormatSelect);
        
        // Add fresh event listener
        newRecoverySelect.addEventListener('change', function() {
            updateRecoveryFormatPreview(this.value);
        });
    }
    
    if (nicheSelect) {
        // Clone node to remove all event listeners, then replace
        const newNicheSelect = nicheSelect.cloneNode(true);
        nicheSelect.parentNode.replaceChild(newNicheSelect, nicheSelect);
        
        // Add fresh event listener
        newNicheSelect.addEventListener('change', function() {
            toggleRecoveryFormatVisibility(this.value);
        });
    }
}

// CRM Integration Management
function manageCRM(partnerId) {
    const partners = <%- JSON.stringify(partners) %>;
    const partner = partners.find(p => p.id == partnerId);
    
    if (!partner) {
        alert('Partner not found');
        return;
    }
    
    // Fill partner info
    document.getElementById('crmPartnerId').value = partnerId;
    document.getElementById('crmPartnerName').value = partner.name;
    
    // Load existing CRM integration if exists
    fetch(`/partners/${partnerId}/crm-integration`)
        .then(response => response.json())
        .then(data => {
            if (data.success && data.integration) {
                const integration = data.integration;
                document.getElementById('crmName').value = integration.crm_name || '';
                document.getElementById('crmEndpoint').value = integration.api_endpoint || '';
                
                // Handle Universal Authentication System
                let authType = integration.auth_type || '';
                
                // For legacy data without auth_type, try to detect from old fields
                if (!authType && integration.api_key) {
                    const authHeader = (integration.auth_header || '').toLowerCase();
                    if (authHeader === 'authorization') {
                        if (integration.api_key.startsWith('Bearer ')) {
                            authType = 'bearer_token';
                        } else {
                            authType = 'basic_auth'; // Could be basic auth
                        }
                    } else {
                        authType = 'api_key'; // Default for legacy data
                    }
                }
                
                // Set auth type and trigger field generation
                document.getElementById('crmAuthType').value = authType;
                updateUniversalAuthFields(); // Generate appropriate fields
                
                // Populate auth fields based on type (after fields are generated)
                setTimeout(() => {
                    if (integration.auth_config) {
                        // New universal auth format
                        const authConfig = integration.auth_config;
                        populateUniversalAuthFields(authType, authConfig);
                    } else if (integration.api_key) {
                        // Legacy format - convert to new format
                        populateLegacyAuthFields(authType, integration);
                    }
                }, 100);

                // Populate status pulling fields
                document.getElementById('statusPullEndpoint').value = integration.status_pull_endpoint || '';
                document.getElementById('statusPullMethod').value = integration.status_pull_method || 'GET';
                document.getElementById('pullFrequency').value = integration.pull_frequency || 60;
                document.getElementById('statusFieldMapping').value = typeof integration.status_field_mapping === 'string' ? 
                    integration.status_field_mapping : JSON.stringify(integration.status_field_mapping || {});
                document.getElementById('statusPullingActive').checked = integration.status_pull_endpoint ? true : false;
                
                document.getElementById('crmMethod').value = integration.request_method || 'POST';
                document.getElementById('crmTestUrl').value = integration.test_url || '';
                
                // Parse JSON fields safely
                try {
                    const headers = typeof integration.request_headers === 'string' ? 
                        JSON.parse(integration.request_headers) : (integration.request_headers || {});
                    document.getElementById('crmHeaders').value = JSON.stringify(headers, null, 2);
                } catch (e) {
                    document.getElementById('crmHeaders').value = '{"Content-Type": "application/json"}';
                }
                
                try {
                    const fieldMapping = typeof integration.field_mapping === 'string' ? 
                        JSON.parse(integration.field_mapping) : (integration.field_mapping || {});
                    document.getElementById('crmFieldMapping').value = JSON.stringify(fieldMapping, null, 2);
                } catch (e) {
                    document.getElementById('crmFieldMapping').value = JSON.stringify({
                        "first_name": "firstName",
                        "last_name": "lastName", 
                        "email": "email",
                        "phone": "phone",
                        "country": "country"
                    }, null, 2);
                }
                
                document.getElementById('crmIsActive').checked = integration.is_active !== false;
            } else {
                // Set defaults for new integration
                document.getElementById('crmApiKey').placeholder = 'Enter API key';
                document.getElementById('crmHeaders').value = '{"Content-Type": "application/json"}';
                document.getElementById('crmFieldMapping').value = JSON.stringify({
                    "first_name": "firstName",
                    "last_name": "lastName", 
                    "email": "email",
                    "phone": "phone",
                    "country": "country"
                }, null, 2);
            }
        })
        .catch(error => {
            console.error('Error loading CRM integration:', error);
        });
    
    // Show modal
    new bootstrap.Modal(document.getElementById('crmIntegrationModal')).show();
}

// Handle authentication type changes
// Universal Authentication System - Dynamic field generation
function updateUniversalAuthFields() {
    const authType = document.getElementById('crmAuthType').value;
    const authConfigContainer = document.getElementById('authConfigFields');
    const hint = document.getElementById('authHint');
    
    // Clear existing fields
    authConfigContainer.innerHTML = '';
    
    if (!authType) {
        hint.textContent = 'Select an authentication type to configure';
        return;
    }
    
    let fieldsHtml = '';
    
    switch(authType) {
        case 'bearer_token':
            fieldsHtml = `
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label class="form-label">Bearer Token *</label>
                        <input type="text" class="form-control" name="auth_token" 
                               placeholder="eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..." required>
                        <div class="form-text">Will send as: Authorization: Bearer YOUR_TOKEN</div>
                    </div>
                </div>`;
            hint.textContent = 'Bearer token authentication - commonly used for JWT tokens';
            break;
            
        case 'api_key':
            fieldsHtml = `
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Header Name *</label>
                        <input type="text" class="form-control" name="auth_header_name" 
                               value="X-API-Key" placeholder="X-API-Key" required>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">API Key *</label>
                        <input type="text" class="form-control" name="auth_key" 
                               placeholder="your-api-key-here" required>
                    </div>
                </div>`;
            hint.textContent = 'API key sent in custom header - most common authentication method';
            break;
            
        case 'basic_auth':
            fieldsHtml = `
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Username *</label>
                        <input type="text" class="form-control" name="auth_username" 
                               placeholder="api_user" required>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Password *</label>
                        <input type="password" class="form-control" name="auth_password" 
                               placeholder="api_password" required>
                    </div>
                </div>`;
            hint.textContent = 'HTTP Basic Authentication - username and password encoded in Authorization header';
            break;
            
        case 'custom_header':
            fieldsHtml = `
                <div class="mb-3">
                    <label class="form-label">Custom Headers (JSON) *</label>
                    <textarea class="form-control" name="auth_custom_headers" rows="4" 
                              placeholder='{"X-Custom-Auth": "value", "X-API-Token": "token"}' required></textarea>
                    <div class="form-text">Custom authentication headers in JSON format</div>
                </div>`;
            hint.textContent = 'Send authentication in custom headers - define multiple headers as JSON object';
            break;
            
        case 'query_param':
            fieldsHtml = `
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Parameter Name *</label>
                        <input type="text" class="form-control" name="auth_param_name" 
                               placeholder="token" required>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Parameter Value *</label>
                        <input type="text" class="form-control" name="auth_param_value" 
                               placeholder="your-token-value" required>
                    </div>
                </div>`;
            hint.textContent = 'Authentication token sent as URL query parameter';
            break;
            
        case 'oauth2':
            fieldsHtml = `
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label class="form-label">Access Token *</label>
                        <input type="text" class="form-control" name="auth_access_token" 
                               placeholder="your-oauth2-access-token" required>
                        <div class="form-text">OAuth2 access token (will be sent as Bearer token)</div>
                    </div>
                </div>`;
            hint.textContent = 'OAuth2 access token authentication';
            break;
            
        case 'custom':
            fieldsHtml = `
                <div class="mb-3">
                    <label class="form-label">Custom Headers (JSON) *</label>
                    <textarea class="form-control" name="auth_custom_headers" rows="4" 
                              placeholder='{"X-Custom-Auth": "value", "X-Signature": "signature"}' required></textarea>
                    <div class="form-text">Custom authentication headers in JSON format</div>
                </div>`;
            hint.textContent = 'Custom authentication - define your own headers structure';
            break;
    }
    
    authConfigContainer.innerHTML = fieldsHtml;
}

// Helper function to populate universal auth fields with existing data
function populateUniversalAuthFields(authType, authConfig) {
    switch(authType) {
        case 'bearer_token':
            const tokenInput = document.querySelector('input[name="auth_token"]');
            if (tokenInput && authConfig.token) {
                tokenInput.value = authConfig.token;
            }
            break;
            
        case 'api_key':
            const headerNameInput = document.querySelector('input[name="auth_header_name"]');
            const keyInput = document.querySelector('input[name="auth_key"]');
            if (headerNameInput && authConfig.header_name) {
                headerNameInput.value = authConfig.header_name;
            }
            if (keyInput && authConfig.key) {
                keyInput.placeholder = 'Key configured (leave blank to keep current)';
            }
            break;
            
        case 'basic_auth':
            const usernameInput = document.querySelector('input[name="auth_username"]');
            const passwordInput = document.querySelector('input[name="auth_password"]');
            if (usernameInput && authConfig.username) {
                usernameInput.value = authConfig.username;
            }
            if (passwordInput && authConfig.password) {
                passwordInput.placeholder = 'Password configured (leave blank to keep current)';
            }
            break;
            
        case 'custom_header':
            const customHeadersTextarea = document.querySelector('textarea[name="auth_custom_headers"]');
            if (customHeadersTextarea && authConfig.headers) {
                customHeadersTextarea.value = JSON.stringify(authConfig.headers, null, 2);
            }
            break;
            
        case 'query_param':
            const paramNameInput = document.querySelector('input[name="auth_param_name"]');
            const paramValueInput = document.querySelector('input[name="auth_param_value"]');
            if (paramNameInput && authConfig.param_name) {
                paramNameInput.value = authConfig.param_name;
            }
            if (paramValueInput && authConfig.param_value) {
                paramValueInput.placeholder = 'Value configured (leave blank to keep current)';
            }
            break;
            
        case 'oauth2':
            const accessTokenInput = document.querySelector('input[name="auth_access_token"]');
            if (accessTokenInput && authConfig.access_token) {
                accessTokenInput.placeholder = 'Token configured (leave blank to keep current)';
            }
            break;
            
        case 'custom':
            const customHeadersTextarea = document.querySelector('textarea[name="auth_custom_headers"]');
            if (customHeadersTextarea && authConfig.custom_headers) {
                customHeadersTextarea.value = JSON.stringify(authConfig.custom_headers, null, 2);
            }
            break;
    }
}

// Helper function to convert legacy auth data to new universal auth format
function populateLegacyAuthFields(authType, integration) {
    switch(authType) {
        case 'bearer_token':
            const tokenInput = document.querySelector('input[name="auth_token"]');
            if (tokenInput && integration.api_key) {
                // Remove "Bearer " prefix if present
                const token = integration.api_key.startsWith('Bearer ') ? 
                    integration.api_key.substring(7) : integration.api_key;
                tokenInput.value = token;
            }
            break;
            
        case 'api_key':
            const headerNameInput = document.querySelector('input[name="auth_header_name"]');
            const keyInput = document.querySelector('input[name="auth_key"]');
            if (headerNameInput && integration.auth_header) {
                headerNameInput.value = integration.auth_header;
            }
            if (keyInput && integration.api_key) {
                keyInput.placeholder = 'Key configured (leave blank to keep current)';
            }
            break;
            
        case 'custom_header':
            const customHeaderNameInput = document.querySelector('input[name="auth_header_name"]');
            const customHeaderValueInput = document.querySelector('input[name="auth_header_value"]');
            if (customHeaderNameInput && integration.auth_header) {
                customHeaderNameInput.value = integration.auth_header;
            }
            if (customHeaderValueInput && integration.api_key) {
                customHeaderValueInput.placeholder = 'Value configured (leave blank to keep current)';
            }
            break;
    }
}

function saveCRMIntegration() {
    const form = document.getElementById('crmIntegrationForm');
    const formData = new FormData(form);
    const partnerId = formData.get('partner_id');
    
    // Get authentication type
    const authType = document.getElementById('crmAuthType').value;
    if (!authType) {
        alert('Please select an authentication type');
        return;
    }
    
    // Build universal auth configuration based on selected type
    let authConfig = {};
    
    switch(authType) {
        case 'bearer_token':
            const bearerToken = formData.get('auth_token');
            if (!bearerToken) {
                alert('Please enter a bearer token');
                return;
            }
            authConfig = { token: bearerToken };
            break;
            
        case 'api_key':
            const headerName = formData.get('auth_header_name');
            const apiKey = formData.get('auth_key');
            if (!headerName || !apiKey) {
                alert('Please enter both header name and API key');
                return;
            }
            authConfig = { header_name: headerName, key: apiKey };
            break;
            
        case 'basic_auth':
            const username = formData.get('auth_username');
            const password = formData.get('auth_password');
            if (!username || !password) {
                alert('Please enter both username and password');
                return;
            }
            authConfig = { username: username, password: password };
            break;
            
        case 'custom_header':
            const customHeaders = formData.get('auth_custom_headers');
            if (!customHeaders) {
                alert('Please enter custom headers configuration');
                return;
            }
            try {
                authConfig = { headers: JSON.parse(customHeaders) };
            } catch (e) {
                alert('Invalid JSON in custom headers: ' + e.message);
                return;
            }
            break;
            
        case 'query_param':
            const paramName = formData.get('auth_param_name');
            const paramValue = formData.get('auth_param_value');
            if (!paramName || !paramValue) {
                alert('Please enter both parameter name and value');
                return;
            }
            authConfig = { param_name: paramName, param_value: paramValue };
            break;
            
        case 'oauth2':
            const accessToken = formData.get('auth_access_token');
            if (!accessToken) {
                alert('Please enter an access token');
                return;
            }
            authConfig = { access_token: accessToken };
            break;
            
        case 'custom':
            const customHeaders = formData.get('auth_custom_headers');
            if (!customHeaders) {
                alert('Please enter custom headers configuration');
                return;
            }
            try {
                authConfig = { custom_headers: JSON.parse(customHeaders) };
            } catch (e) {
                alert('Invalid JSON in custom headers: ' + e.message);
                return;
            }
            break;
    }
    
    // Validate JSON fields
    let headers, fieldMapping, statusFieldMapping;
    try {
        headers = JSON.parse(document.getElementById('crmHeaders').value || '{}');
        fieldMapping = JSON.parse(document.getElementById('crmFieldMapping').value || '{}');
        
        // Handle status field mapping safely
        const statusFieldMappingElement = document.getElementById('statusFieldMapping');
        const statusFieldMappingValue = statusFieldMappingElement ? statusFieldMappingElement.value : '{}';
        statusFieldMapping = JSON.parse(statusFieldMappingValue || '{}');
    } catch (e) {
        alert('Invalid JSON in headers, field mapping, or status field mapping: ' + e.message);
        return;
    }
    
    const data = {
        crm_name: formData.get('crm_name'),
        api_endpoint: formData.get('api_endpoint'),
        auth_type: authType,
        auth_config: authConfig,
        request_method: formData.get('request_method'),
        test_url: formData.get('test_url'),
        request_headers: headers,
        field_mapping: fieldMapping,
        is_active: document.getElementById('crmIsActive') ? document.getElementById('crmIsActive').checked : false,
        // Status pulling configuration - handle missing elements gracefully
        status_pull_endpoint: document.getElementById('statusPullEndpoint') ? document.getElementById('statusPullEndpoint').value : '',
        status_pull_method: document.getElementById('statusPullMethod') ? document.getElementById('statusPullMethod').value : 'GET',
        pull_frequency: document.getElementById('pullFrequency') ? parseInt(document.getElementById('pullFrequency').value) || 60 : 60,
        status_field_mapping: statusFieldMapping,
        status_pulling_active: document.getElementById('statusPullingActive') ? document.getElementById('statusPullingActive').checked : false
    };
    
    console.log('Sending CRM integration request for partner:', partnerId);
    // Note: Not logging full data to protect auth secrets
    
    fetch(`/partners/${partnerId}/crm-integration`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
    })
    .then(response => {
        if (!response.ok) {
            return response.text().then(text => {
                throw new Error(`HTTP ${response.status}: ${text}`);
            });
        }
        return response.json();
    })
    .then(result => {
        if (result.success) {
            bootstrap.Modal.getInstance(document.getElementById('crmIntegrationModal')).hide();
            showTestResult('CRM integration saved successfully!', 'success');
            setTimeout(() => location.reload(), 1500);
        } else {
            alert('Failed to save CRM integration: ' + (result.error || 'Unknown error'));
        }
    })
    .catch(error => {
        console.error('Save CRM Error:', error);
        alert('Failed to save CRM integration: ' + error.message);
    });
}

function testCRMIntegration() {
    const partnerId = document.getElementById('crmPartnerId').value;
    const authType = document.getElementById('crmAuthType').value;
    
    if (!authType) {
        alert('Please select an authentication type');
        return;
    }
    
    // Build the same auth config as in save function for testing
    const formData = new FormData(document.getElementById('crmIntegrationForm'));
    let authConfig = {};
    
    switch(authType) {
        case 'bearer':
            const bearerToken = formData.get('auth_token');
            if (!bearerToken) {
                alert('Please enter a bearer token');
                return;
            }
            authConfig = { token: bearerToken };
            break;
            
        case 'api_key':
            const headerName = formData.get('auth_header_name');
            const apiKey = formData.get('auth_key');
            if (!headerName || !apiKey) {
                alert('Please enter both header name and API key');
                return;
            }
            authConfig = { header_name: headerName, key: apiKey };
            break;
            
        case 'basic_auth':
            const username = formData.get('auth_username');
            const password = formData.get('auth_password');
            if (!username || !password) {
                alert('Please enter both username and password');
                return;
            }
            authConfig = { username: username, password: password };
            break;
            
        case 'custom_header':
            const customHeaders = formData.get('auth_custom_headers');
            if (!customHeaders) {
                alert('Please enter custom headers configuration');
                return;
            }
            try {
                authConfig = { headers: JSON.parse(customHeaders) };
            } catch (e) {
                alert('Invalid JSON in custom headers: ' + e.message);
                return;
            }
            break;
            
        case 'query_param':
            const paramName = formData.get('auth_param_name');
            const paramValue = formData.get('auth_param_value');
            if (!paramName || !paramValue) {
                alert('Please enter both parameter name and value');
                return;
            }
            authConfig = { param_name: paramName, param_value: paramValue };
            break;
            
        case 'oauth2':
            const accessToken = formData.get('auth_access_token');
            if (!accessToken) {
                alert('Please enter an access token');
                return;
            }
            authConfig = { access_token: accessToken };
            break;
            
        case 'custom':
            const customHeaders = formData.get('auth_custom_headers');
            if (!customHeaders) {
                alert('Please enter custom headers configuration');
                return;
            }
            try {
                authConfig = { custom_headers: JSON.parse(customHeaders) };
            } catch (e) {
                alert('Invalid JSON in custom headers: ' + e.message);
                return;
            }
            break;
    }

    const data = {
        api_endpoint: document.getElementById('crmEndpoint').value,
        auth_type: authType,
        auth_config: authConfig,
        request_method: document.getElementById('crmMethod').value,
        crm_type: document.getElementById('crmType').value,
        field_mapping: document.getElementById('crmFieldMapping').value
    };
    
    if (!data.api_endpoint) {
        alert('Please fill in API endpoint');
        return;
    }
    
    showTestResult('Testing connection...', 'info');
    
    fetch(`/partners/${partnerId}/test-crm`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            const details = [
                result.message,
                `Response time: ${result.responseTime}ms`,
                result.responseData ? `Response preview: ${result.responseData.substring(0, 100)}...` : ''
            ].filter(Boolean).join('\n');
            
            showDetailedTestResult(details, 'success');
        } else {
            const details = [
                result.error || 'Unknown error',
                result.status ? `HTTP Status: ${result.status}` : '',
                result.details ? `Details: ${result.details}` : ''
            ].filter(Boolean).join('\n');
            
            showDetailedTestResult(details, 'danger');
        }
    })
    .catch(error => {
        showDetailedTestResult('❌ Connection failed: Network error', 'danger');
    });
}

function previewCRM() {
    const testUrl = document.getElementById('crmTestUrl').value;
    if (testUrl) {
        window.open(testUrl, '_blank');
    } else {
        alert('No preview URL configured');
    }
}

// Update CRM field mapping based on selected template
function updateCrmTemplateFields() {
    const crmType = document.getElementById('crmType').value;
    const fieldMappingTextarea = document.getElementById('crmFieldMapping');
    const authHeaderInput = document.getElementById('crmAuthHeader');
    
    const templates = {
        'manticore': {
            fieldMapping: {
                "first_name": "firstName",
                "last_name": "lastName", 
                "birth_date": "birthDate",
                "gender": "gender",
                "country": "country",
                "city": "city",
                "language": "language",
                "description": "description",
                "numbers": "phone",
                "emails": "email"
            },
            authHeader: "api-key"  // Manticore requires this specific header
        },
        'generic': {
            fieldMapping: {
                "firstName": "firstName",
                "lastName": "lastName", 
                "email": "email",
                "phone": "phone",
                "country": "country",
                "source": "source"
            },
            authHeader: "X-API-Key"
        },
        'salesforce': {
            fieldMapping: {
                "FirstName": "firstName",
                "LastName": "lastName",
                "Email": "email", 
                "Phone": "phone",
                "Company": "company",
                "LeadSource": "source"
            },
            authHeader: "Authorization"
        },
        'hubspot': {
            fieldMapping: {
                "properties.firstname": "firstName",
                "properties.lastname": "lastName",
                "properties.email": "email",
                "properties.phone": "phone",
                "properties.lifecyclestage": "leadStage"
            },
            authHeader: "Authorization"
        }
    };
    
    if (crmType !== 'custom' && templates[crmType]) {
        const template = templates[crmType];
        fieldMappingTextarea.value = JSON.stringify(template.fieldMapping, null, 2);
        if (authHeaderInput && template.authHeader) {
            authHeaderInput.value = template.authHeader;
        }
    }
}

function showTestResult(message, type) {
    const testResult = document.getElementById('testResult');
    testResult.className = `alert alert-${type}`;
    testResult.textContent = message;
    testResult.style.display = 'block';
    
    setTimeout(() => {
        testResult.style.display = 'none';
    }, 5000);
}

function showDetailedTestResult(message, type) {
    const testResult = document.getElementById('testResult');
    testResult.className = `alert alert-${type}`;
    testResult.innerHTML = message.split('\n').map(line => `<div>${line}</div>`).join('');
    testResult.style.display = 'block';
    
    // Keep detailed results visible longer
    setTimeout(() => {
        testResult.style.display = 'none';
    }, 10000);
}

// Fix for missing function error
function switchPastebinFriendly() {
    // Stub function to prevent JavaScript errors
    // This was likely a leftover reference from development
    console.log('switchPastebinFriendly called - no action needed');
}

// Status tracking functionality
function viewStatus(partnerId) {
    const partners = <%- JSON.stringify(partners) %>;
    const partner = partners.find(p => p.id == partnerId);
    
    if (!partner) {
        alert('Partner not found');
        return;
    }
    
    // Update modal title with partner name
    document.querySelector('#statusTrackingModal .modal-title').textContent = 
        `Lead Status Tracking - ${partner.name}`;
    
    // Show loading spinner
    document.getElementById('statusTrackingContent').innerHTML = `
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    `;
    
    // Load status data
    fetch(`/partners/${partnerId}/status-tracking`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                renderStatusTracking(data);
            } else {
                document.getElementById('statusTrackingContent').innerHTML = 
                    '<div class="alert alert-danger">Failed to load status tracking data</div>';
            }
        })
        .catch(error => {
            console.error('Status tracking error:', error);
            document.getElementById('statusTrackingContent').innerHTML = 
                '<div class="alert alert-danger">Network error loading status data</div>';
        });
    
    // Show modal
    new bootstrap.Modal(document.getElementById('statusTrackingModal')).show();
}

function renderStatusTracking(data) {
    const { summary, recent_updates, postback_config } = data;
    
    const html = `
        <!-- Summary Cards -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card bg-primary text-white">
                    <div class="card-body">
                        <h6 class="card-title">Total Leads</h6>
                        <h3>${summary.total_leads}</h3>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-success text-white">
                    <div class="card-body">
                        <h6 class="card-title">Conversions</h6>
                        <h3>${summary.conversions}</h3>
                        <small>${summary.conversion_rate}% rate</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-warning text-white">
                    <div class="card-body">
                        <h6 class="card-title">Revenue</h6>
                        <h3>$${(summary.total_revenue || 0).toFixed(2)}</h3>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-info text-white">
                    <div class="card-body">
                        <h6 class="card-title">Avg Quality</h6>
                        <h3>${(summary.avg_quality || 0).toFixed(1)}/10</h3>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Configuration Section -->
        <div class="card mb-4">
            <div class="card-header">
                <h6><i class="fas fa-cogs me-2"></i>Tracking Configuration</h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <strong>Postback URL:</strong><br>
                        <code>/api/postback/status/${postback_config?.postback_token || 'Not configured'}</code>
                        ${postback_config?.postback_token ? 
                            '<span class="badge bg-success ms-2">Active</span>' : 
                            '<span class="badge bg-warning ms-2">Not Setup</span>'
                        }
                    </div>
                    <div class="col-md-6">
                        <strong>Status Updates:</strong><br>
                        <span class="badge bg-primary">${recent_updates.length} recent</span>
                        <span class="badge bg-secondary">Both postback & pulling enabled</span>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Recent Updates -->
        <div class="card">
            <div class="card-header">
                <h6><i class="fas fa-history me-2"></i>Recent Status Updates</h6>
            </div>
            <div class="card-body">
                ${recent_updates.length === 0 ? 
                    '<div class="alert alert-info">No recent status updates</div>' : 
                    `<div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Lead</th>
                                    <th>Status</th>
                                    <th>Value</th>
                                    <th>Quality</th>
                                    <th>Source</th>
                                    <th>Date</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${recent_updates.map(update => `
                                    <tr>
                                        <td>
                                            <small>ID: ${update.lead_id}</small><br>
                                            <small class="text-muted">${update.lead_email}</small>
                                        </td>
                                        <td>
                                            <span class="badge bg-${getStatusColor(update.status)}">${update.status}</span>
                                        </td>
                                        <td>
                                            ${update.conversion_value ? '$' + parseFloat(update.conversion_value).toFixed(2) : '-'}
                                        </td>
                                        <td>
                                            ${update.quality_score ? update.quality_score + '/10' : '-'}
                                        </td>
                                        <td>
                                            <span class="badge bg-${update.update_source === 'postback' ? 'primary' : 'secondary'}">
                                                ${update.update_source}
                                            </span>
                                        </td>
                                        <td>
                                            <small>${new Date(update.created_at).toLocaleDateString()}</small>
                                        </td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>`
                }
            </div>
        </div>
    `;
    
    document.getElementById('statusTrackingContent').innerHTML = html;
}

function getStatusColor(status) {
    switch (status) {
        case 'converted': return 'success';
        case 'qualified': return 'primary';
        case 'rejected': return 'danger';
        case 'pending': return 'warning';
        default: return 'secondary';
    }
}

// Make partners data available globally for centralized JS
window.partners = <%- JSON.stringify(partners) %>;
</script>

<style>
.ratio-display {
    min-width: 200px;
}
.progress {
    border-radius: 3px;
    overflow: hidden;
}
.ratio-display .badge {
    font-size: 0.7rem;
    padding: 0.2rem 0.4rem;
}
.analytics-display {
    min-width: 160px;
}
.analytics-display .badge {
    font-size: 0.65rem;
    padding: 0.15rem 0.3rem;
}
</style>